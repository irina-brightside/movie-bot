import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import F
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.token import validate_token
from dotenv import load_dotenv

DEADLINE = datetime(2025, 8, 10, 21, 0)  # 10 –∞–≤–≥—É—Å—Ç–∞ 2025, 21:00 –ø–æ –ú–°–ö

submitted_links = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
validate_token(BOT_TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è Railway –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–Ω–æ –æ—à–∏–±–æ–∫)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –∫–∏–Ω–æ–≤–µ—á–µ—Ä! üé¨ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—ã—ã–ª–∫–∏ –Ω–∞ —Ñ–∏–ª—å–º —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞."
                         f"–î–µ–¥–ª–∞–π–Ω: {DEADLINE.strftime('%d.%m.%Y %H:%M')} –ø–æ –ú–°–ö.")

@router.message(F.text)
async def handle_movie_links(message: Message):
    if datetime.now() > DEADLINE:
        await message.answer("‚õî –ü—Ä–∏–µ–º —Ñ–∏–ª—å–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    urls = re.findall(r'https?://\S+', message.text)

    valid_urls = []
    invalid_urls = []

    for url in urls:
        if re.match(KINOPOISK_URL_PATTERN, url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    for url in valid_urls:
        user_movie_suggestions.setdefault(message.from_user.id, []).append(url)

    if invalid_urls:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.")
    elif valid_urls:
        await message.answer("‚úÖ –§–∏–ª—å–º(—ã) –ø—Ä–∏–Ω—è—Ç—ã!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
