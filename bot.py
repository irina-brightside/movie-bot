import asyncio
import logging
import re
from aiogram.types import KeyboardButtonPollType
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.bot import DefaultBotProperties
from aiogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = int(os.getenv("CHAT_ID"))  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∏–ª—å–º–æ–≤
movie_links = []

# –†–µ–≥—É–ª—è—Ä–∫–∞ –¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫
KINopoisk_PATTERN = re.compile(r"https?://(www\.)?kinopoisk\.ru/film/\S+")

@dp.message()
async def handle_movie_links(message: types.Message):
    if message.chat.id != CHAT_ID:
        return

    links = re.findall(r"https?://\S+", message.text)
    kino_links = [link for link in links if KINopoisk_PATTERN.match(link)]
    bad_links = [link for link in links if not KINopoisk_PATTERN.match(link)]

    response = ""

    if kino_links:
        suggested_movies.extend(kino_links)
        response += f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Å—ã–ª–∫–∏: {' | '.join(kino_links)}\n"

    if bad_links:
        response += f"‚ö†Ô∏è –ù–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ): {' | '.join(bad_links)}"

    if response:
        await message.reply(response)

async def send_reminder():
    text = (
        "üé¨ –ü–æ—Ä–∞ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–∏–ª—å–º –¥–ª—è –∫–∏–Ω–æ–≤–µ—á–µ—Ä–∞!\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–∏–ª—å–º—ã —Å –ö–∏–Ω–æ–ø–æ–∏—Å–∫–∞.\n"
        "üìå –î–µ–¥–ª–∞–π–Ω: –¥–æ <b>—á–µ—Ç–≤–µ—Ä–≥–∞ 19:00</b> –ø–æ –ú–æ—Å–∫–≤–µ."
    )
    await bot.send_message(chat_id=CHAT_ID, text=text)

async def main():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(send_reminder, CronTrigger(day_of_week='wed', hour=20, minute=00, timezone="Europe/Moscow"))

    
@dp.startup()
async def schedule_vote():
    scheduler.add_job(send_vote_poll, CronTrigger(day_of_week='wed', hour=20, minute=28, timezone="Europe/Moscow"))

scheduler.start()

async def send_vote_poll():
    if not movie_links:
        await bot.send_message(CHAT_ID, "–§–∏–ª—å–º—ã –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã.")
        return

    options = [f"üé¨ {link}" for link in movie_links]
    await bot.send_poll(
        chat_id=CHAT_ID,
        question="–í—ã–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å–º –¥–ª—è –∫–∏–Ω–æ–≤–µ—á–µ—Ä–∞ üé•",
        options=options,
        is_anonymous=False,
        allows_multiple_answers=True
    )

    movie_links.clear()

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
