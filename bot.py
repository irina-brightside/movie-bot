from aiogram.types import Message
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
import asyncio
import logging
import os
from datetime import datetime, timedelta
from aiogram import F
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.token import validate_token
from dotenv import load_dotenv


submitted_links = []

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
validate_token(BOT_TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è Railway –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–Ω–∞—á–µ –Ω–µ –≤–∏–¥–Ω–æ –æ—à–∏–±–æ–∫)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


@router.message(F.text)
async def handle_movie_links(message: Message):
    if datetime.now() > DEADLINE:
        await message.answer("‚õî –ü—Ä–∏–µ–º —Ñ–∏–ª—å–º–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    urls = re.findall(r'https?://\S+', message.text)

    valid_urls = []
    invalid_urls = []

    for url in urls:
        if re.match(KINOPOISK_URL_PATTERN, url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    for url in valid_urls:
        user_movie_suggestions.setdefault(message.from_user.id, []).append(url)

    if invalid_urls:
        await message.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã. –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫.")
    elif valid_urls:
        await message.answer("‚úÖ –§–∏–ª—å–º(—ã) –ø—Ä–∏–Ω—è—Ç—ã!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

    # –ó–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
scheduler = AsyncIOScheduler(timezone=pytz.timezone("Europe/Moscow"))

# –ö–∞–∂–¥—É—é —Å—Ä–µ–¥—É –≤ 14:00 ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–±–æ—Ä–µ —Ñ–∏–ª—å–º–æ–≤
scheduler.add_job(
    send_reminder,
    CronTrigger(day_of_week="wed", hour=19, minute=27)
)

# –ö–∞–∂–¥—É—é —Å–ª–µ–¥—É—é—â—É—é —á–µ—Ç–≤–µ—Ä–≥ –≤ 19:00 ‚Äî –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
scheduler.add_job(
    start_voting,
    CronTrigger(day_of_week="thu", hour=19, minute=0)
)

scheduler.start()

if __name__ == "__main__":
    asyncio.run(main())

# ID —á–∞—Ç–∞, –∫—É–¥–∞ –±–æ—Ç –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å (–ø–æ–∫–∞ –ø–æ—Å—Ç–∞–≤–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–ª—É—à–∫—É)
GROUP_CHAT_ID = -4890829963

async def send_reminder():
    await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text="üé¨ –ü–æ—Ä–∞ –≤—ã–±–∏—Ä–∞—Ç—å —Ñ–∏–ª—å–º –Ω–∞ –∫–∏–Ω–æ–≤–µ—á–µ—Ä! –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ö–∏–Ω–æ–ø–æ–∏—Å–∫ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ—Ç–≤–µ—Ä–≥–∞ 19:00 üïñ"
    )

async def start_voting():
    await bot.send_message(
        chat_id=GROUP_CHAT_ID,
        text="üó≥ –í—Ä–µ–º—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Ñ–∏–ª—å–º! –°–µ–π—á–∞—Å —è –∑–∞–ø—É—â—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ..."
    )
    # –ó–¥–µ—Å—å –ø–æ—Ç–æ–º –ø–æ–¥–∫–ª—é—á–∏–º —Å–±–æ—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ –∑–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∫–∏
